names(pollution)
reg=table(pollution$region)
reg<-table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Countries in Each Region")
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<-subest(pollution, region == "east")
east<-subset(pollution, region == "east")
head(east)
hist(east$pm25, col="green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col="pollution$region")
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
?Devices
with(faithful,plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png"
)
dev.off()
getwd()
swirl()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed),max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income | region, data = sate, layout=c(4,1))
xyplot(Life.Exp~Income | region, data = state, layout=c(4,1))
xyplot(Life.Exp~Income | region, data = state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type="n")
title(main="Wind and Ozone in NYC")
may<-subset(airquality, airquality$Month==5)
may<-subset(airquality, Month==5)
points(airquality$Wind, airquality$Ozone, col="blue", pch="3")
points(may$Wind, may$Ozone, col="blue", pch="17")
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay<-subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col="red", pch=19)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright",pch=c(17,8), col=c("blue","red"), c("May","Other Months"))
legend("topright",pch=c(17,8), col=c("blue","red"), legend=c("May","Other Months"))
line(v=median(airquality$Wind), lty=2, lwd=2)
lines(v=median(airquality$Wind), lty=2, lwd=2)
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Temp, main = "Ozone and Temperature")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer=TRUE)
getwd()
epc<-read.table('household_power_consumption.txt')
head(epc)
summary(epc)
?rm
rm epc
rm(epc)
epc<-read.csv('household_power_consumption.txt')
head(epc)
names(epc)
rm(epc)
epc<-read.table('household_power_consumption.txt', header=TRUE, sep=";", na.strings="?")
head(epc)
names(epc)
clean_epc = subset(epc, strptime(as.Date(Date), format='%d/%m/%Y') >= strptime('2017-02-01', format='%d/%m/%Y')   )
head(clean_epc)
clean_epc = subset(epc, strptime(as.Date(Date), format='%d/%m/%Y') >= strptime('2007-02-01', format='%d/%m/%Y') && strptime(as.Date(Date), format='%d/%m/%Y') <= strptime('2007-02-02', format='%d/%m/%Y')    )
head(clean_epc)
head(epc)
clean_epc = subset(epc, strptime(as.Date(Date), format='%d/%m/%Y') >= strptime('2007-02-01', format='%d/%m/%Y') )
head(clean_epc)
clean_epc = subset(epc, Date >= strptime('2007-02-01', format='%d/%m/%Y') )
clean_epc = subset(epc, strptime(as.Date(Date), format='%d/%m/%Y') >= strptime('01/02/2017', format='%d/%m/%Y') )
head(clean_epc)
test<- strptime(as.Date(epc$Date),format='%d/%m/%Y')
head(test)
?strptime
test<- strptime(as.Date(epc$Date))
test<- strptime(as.Date(epc$Date), format='%Y-%m-%d')
head(test)
test<- strptime(as.Date(epc$Date), format='%y-%m-%d')
head(test)
test<- strptime(as.Date(epc$Date), format='%d-%m-%Y')
head(test)
test<- strptime(as.Date(epc$Date), format='%d/%m/%Y')
head(test)
epc$Date <-as.Date(epc$Date, format="%d/%m/%Y")
head(epc)
epc$Time <-format(epc$Time, format="%H:%M:%S")
epc<- subset(epc, Date == "2007-02-01" | Date =="2007-02-02")
head(epc)
hist(epc$Global_active_power)
par(mfrow)
par(mfrows)
par('mfrows')
?par
par(mfrow=c(1,1))
hist(epc$Global_active_power)
hist(epc$Global_active_power, title="Global Active Power")
hist(epc$Global_active_power, main="Global Active Power")
hist(epc$Global_active_power)
title(main="Global Active Power")
hist(epc$Global_active_power, col="red", xlab="Global Active Power (kilowatts)", ylab="Frequency", main = "Global Active Power")
hist(epc$Global_active_power, col="red", xlab="Global Active Power (kilowatts)", ylab="Frequency", main = "Global Active Power")
png("plot1.png", width=480, height=480)
hist(epc$Global_active_power, col="red", xlab="Global Active Power (kilowatts)", ylab="Frequency", main = "Global Active Power")
dev.off()
png("plot2.png", width=480, height=480)
with(epc, plot(FullTimeDate, Global_active_power, type="l", xlab="Day", ylab="Global Active Power (kilowatts)"))
with(epc, plot(DateTime, Global_active_power, type="l", xlab="Day", ylab="Global Active Power (kilowatts)"))
DateTime <- strptime(paste(epc$Date, epc$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
epc <- cbind(epc, DateTime)
with(epc, plot(DateTime, Global_active_power, type="l", xlab="Day", ylab="Global Active Power (kilowatts)"))
png("plot2.png", width=480, height=480)
with(epc, plot(DateTime, Global_active_power, type="l", xlab="Day", ylab="Global Active Power (kilowatts)"))
with(epc, plot(DateTime, Global_active_power, type="l", xlab="Day", ylab="Global Active Power (kilowatts)")
)
head(epc)
DateTime <- strptime(paste(epc$Date, epc$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
DateTime
rm(epc)
epc<-read.table('household_power_consumption.txt', header=TRUE, sep=";", na.strings="?")
DateTime <- strptime(paste(epc$Date, epc$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
epc <- cbind(epc, DateTime)
head(epc)
epc$Date <-as.Date(epc$Date, format="%d/%m/%Y")
epc$Time <-format(epc$Time, format="%H:%M:%S")
epc<- subset(epc, Date == "2007-02-01" | Date =="2007-02-02")
png("plot2.png", width=480, height=480)
with(epc, plot(DateTime, Global_active_power, type="l", xlab="Day", ylab="Global Active Power (kilowatts)"))
png("plot2.png", width=480, height=480)
with(epc, plot(DateTime, Global_active_power, type="l", xlab="Day", ylab="Global Active Power (kilowatts)"))
dev.off()
source('plot1.R')
source('plot2.R')
source('plot2.R')
source('plot2.R')
source('plot3.R')
source('plot3.R')
source('plot4.R')
library(swirl)
swirl
swirl()
rm -r(ls())
rm(ls())
rm(ls()-l)
ls()
epc
library(swirl)
swirl()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
library(ggplot2)
library(ggplot2movies)
install.packages("ggplot2movies")
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
head(movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()
library(datasets)
data(airquality)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(swirl)
rm(list=ls())
swirl()
head(airquality)
xyplot(Ozone~Wind, airquality)
xyplot(Ozone~Wind, airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone~Wind, data=airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data=airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month, data=airquality, layout=c(5,1))
p<-xyplot(Ozone~Wind,data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathofile("plot1.R"),local=TRUE)
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat|color*cut, data=diamonds, strip=FALSE, pch=20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat|color*cut, data=diamonds, pch=20, xlab = myxlab, ylab = myylab, main = mymain)
library(swirl)
swirl()
sample(colors(),10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2<- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p2<- colorRampPalette(c("blue","green", alpha=.5))
p2<- colorRampPalette(c("blue","green"),alpha=.5)
p3<- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,4,pch=19, col=rgb(0,.5,.5))
plot(x,y,pch=19, col=rgb(0,.5,.5))
plot(x,y,pch=19, col=rgb(0,.5,.5,0.3))
cols<-brewer.pal(3,"BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom=c("point","smooth"))
qplot(y=hwy, data=mpg, color=drv)
myhght
myhigh
qplot(drv,hwy,data = mpg,geom="boxplot")
qplot(drv,hwy,data = mpg,geom="boxplot", color="manufacturer")
qplot(drv,hwy,data = mpg,geom="boxplot", color=manufacturer)
qplot(hwy,data=mpg, fill=drv)
qplot(displ,hwy,data=mpg,facets = )
qplot(displ,hwy,data=mpg,facets = . ~ drv)
qplot(hwy,data=mpg, facets = drv ~ ., binwidth=2)
qplot(displ,hwy,data=mpg,geom=c('point','smooth'),facets = . ~ drv)
g<-ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4, alpha=1/2
)
g+geom_point(size=4, alpha=1/2, aes(color=drv))
g+geom_point(aes(color=drv), labs(title="Swirl Rules!"), labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(aes(color=drv,labs(title="Swirl Rules!"), labs(x="Displacement",y="Hwy Mileage")))
g+geom_point(aes(color=drv,labs(title="Swirl Rules!"), labs(x="Displacement",y="Hwy Mileage")))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv), size=2, alpha=1/2)+geom_smooth(size=4,linetype=3, method = "lm", se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx, myy, type="l", ylim=c(-3,3))
g<-ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cycl, margins = TRUE )
g++facet_grid(drv~cycl, margins = TRUE )
g+facet_grid(drv~cycl, margins = TRUE )
g+geom_point()+facet_grid(drv~cycl, margins = TRUE )
g+geom_point()
g + geom_point() + facet_grid(drv~cyl,margins=TRUE
)
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method = "lm", se=FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method = "lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price,data = diamonds,geom="density")
qplot(price,data = diamonds,geom="density", color=cut
)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom_smooth="lm")
qplot(carat, price, data=diamonds, color=cut) +, geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut, facets = .~cut + geom_smooth(method="lm")
)
qplot(carat, price, data=diamonds, color=cut, facets = .~cut) + geom_smooth(method="lm")
g<-ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=1/3
)
cutpoints <- quantile(diamonds$carat, seq(-1,1,length=4),na.rm = TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4),na.rm = TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat,cutpoints)
g<-ggplot(diamonds, aes(dept, price))
g<-ggplot(diamonds, aes(depth, price))
g<-ggplot(diamonds, aes(depth, price)) +geom_point(alpha=1/3) + facet_grid(cut~car2)
g<-ggplot(diamonds, aes(depth, price))
g+geom_point(alpha=1/3) + facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3) + facet_grid(cut~car2) +geom_smooth(method = "lm", size=3, color="pink")
g<-ggplot(diamonds, aes(carat, price))
g<-ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
library(swirl)
rm(list=ls())
swirl()
0
exit
quit
quit()
library(swirl)
swirl()
swirl()
swirl()
end
end()
play()
next()
nxt*
nx
nxt()
exit()
quit()
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
dist(dataFrame)
hclust(distxy)
hc<-hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
info()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
getwd()
source('~/R/plot1.R', encoding = 'UTF-8')
source('plot1.R')
head(NEI
)
head(SCC)
aggregatedTotalByYear
hist(aggregatedTotalByYear)
plot(aggregatedTotalByYear)
?aggregate
source('plot1.R')
source('plot2.R')
source('plot3.R')
source('plot3.R')
source('plot3.R')
TotalByYearType
source('plot3.R')
source('plot3.R')
source('plot3.R')
source('plot3.R')
source('plot3.R')
source('plot4.R')
source('plot5.R')
source('plot6.R')
source('plot5.R')
source('plot6.R')
library(kernlab)
install.packages(kernlab)
install.packages("kernlab")
install.packages("knitr")
getwd()
read.csv("repdata_data_StormData.csv.bz2", header = TRUE, sep = ",", quote = "\"",...)
read.csv("repdata_data_StormData.csv.bz2")
padata<-read.csv("repdata_data_StormData.csv.bz2")
head(padata)
str(padata)
summary(padata)
setwd('C:/Users/Youssef/Documents/GitHub/gettingandcleaningdata/RepData_PeerAssessment2')
head(padata)
table(padata,EVTYPE)
table(padata,padata[EVTYPE,])
table(padata,padata[,EVTYPE])
table(padata[,EVTYPE])
?unique
unique(padata[,EVTYPE])
unique(padata[EVTYPE,])
padata[,EVTYPE]
padata[EVTYPE,]
padata[,"EVTYPE"]
unique(padata[,"EVTYPE"])
unique(padata[,"EVTYPE"])
table(padata$EVTYPE)
head(padata)
library(dplyr)
stormdata<-padata
stormdata.fatalities <- stormdata %>% select(EVTYPE, FATALITIES) %>% group_by(EVTYPE) %>% summarise(total.fatalities = sum(FATALITIES)) %>% arrange(-total.fatalities)
head(stormdata.fatalities)
fatalities <- stormdata %>% select(EVTYPE, FATALITIES) %>% group_by(EVTYPE) %>% summarise(totalFatalities = sum(FATALITIES)) %>% arrange(-totalFatalities)
head(fatalities)
